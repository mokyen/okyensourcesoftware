{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to OkyenSourceSoftware.com!</p> <p>Thanks for stopping by my little corner of the web!</p>"},{"location":"#latest-blog","title":"Latest Blog","text":"<p>C++Now: What to Know Before You Go - 2025/04/22</p>"},{"location":"about/","title":"About the Blog","text":"<p>This site serves as a place for me to share some of my learnings and ideas on software development. Most of the blog focuses on my interests in C++, unit testing, software architecture/design, and medical device development.</p> <p>I am hopeful that this blog gives an opportunity for engagement with others, so please reach out if you have any feedback!</p>"},{"location":"bio/","title":"About Michael","text":"<p>Michael is a Staff Software Engineer at Plexus in Raleigh, NC, where he primarily focuses on developing embedded C++ software for medical devices. Over a decade of experience at contract engineering companies has given him opportunities to work on a variety of projects ranging from green-field design to final verification testing. Michael is passionate about software design, architecture, and unit testing, and he is always looking for opportunities to learn.</p> <p>Presentations:</p> <ul> <li>C++Now 2024: Developing Better Code by Isolating Decisions</li> <li>C++Now 2024 Lightning Talk: Debugging Like House</li> </ul>"},{"location":"blog/","title":"Welcome to my blog!","text":"<p>This site serves as a place for me to share some of my learnings and ideas on software development. Most of the blog focuses on my interests in C++, unit testing, software architecture/design, and medical device development.</p> <p>I am hopeful that this blog gives an opportunity for engagement with others, so please reach out if you have any feedback!</p> <p>Subscribe to updates via RSS Feed</p>"},{"location":"blog/cnow-what-to-know-before-you-go/","title":"C++Now: What to Know Before You Go","text":"<p>I am so excited that C++Now is just around the corner! Unfortunately, I won't be able to attend this year, but I wanted to share some insights from my previous experience to help first-timers and returning attendees prepare for this fantastic event. Here are my top 15 tips to make your C++Now experience even better:</p>"},{"location":"blog/cnow-what-to-know-before-you-go/#pack-boots-or-good-walking-shoes-for-grass","title":"\ud83e\udd7e Pack boots or good walking shoes for grass","text":"<p>Bring comfortable walking shoes that can handle going through grass. The walk from the hotels to the conference rooms takes about 10 minutes. There's a shortcut between conference venues that cuts through a field, so having shoes that can handle varied terrain is key, especially since the weather can be unpredictable. We even had snow last year!</p>"},{"location":"blog/cnow-what-to-know-before-you-go/#being-a-weatherproof-jacket","title":"\ud83e\udde5 Being a weatherproof jacket","text":"<p>Weather conditions can really vary at this time of year in Aspen. A rainproof jacket is definitely important, and layers are highly recommended. Temperatures can range from snowy conditions to relatively mild, so be prepared for anything.</p>"},{"location":"blog/cnow-what-to-know-before-you-go/#check-out-the-fitness-center-pool","title":"\ud83c\udfca\u200d\u2642\ufe0f Check out the fitness center &amp; pool","text":"<p>The resort's fitness facilities are awesome! I really enjoyed using the hot tub and going for a swim before my first conference talk. There's even an indoor basketball court if you need to burn off some energy between sessions.</p>"},{"location":"blog/cnow-what-to-know-before-you-go/#the-building-bethe-is-pronounced-beta","title":"\ud83c\udfe2 The building \"Bethe\" is pronounced \"Beta\"","text":"<p>One of the conference rooms is called \"Bethe\" but it's actually pronounced \"Beta.\" This can be confusing when you hear people talking about it if you don't know this ahead of time.</p>"},{"location":"blog/cnow-what-to-know-before-you-go/#front-row-seating-at-the-lightning-talks-is-for-speakers","title":"\ud83d\udcba Front row seating at the Lightning Talks is for speakers","text":"<p>I didn't know this initially and accidentally sat in the front where there were empty seats. It turned out those spots are reserved for speakers doing lightning talks. Fortunately, I was planning to do a lightning talk anyway!</p>"},{"location":"blog/cnow-what-to-know-before-you-go/#bring-along-your-chapstick","title":"\ud83d\udca7 Bring along your Chapstick","text":"<p>The high elevation makes the air quite dry, so a good lip balm is essential. Your lips will thank you!</p>"},{"location":"blog/cnow-what-to-know-before-you-go/#limited-restaurant-options-in-aspen","title":"\ud83c\udf7d\ufe0f Limited restaurant options in Aspen","text":"<p>Aspen is rather shut down during this time of year. The snow season is usually over, and the town goes a bit dormant before reopening for the warmer season. While we found some great food, options are limited, especially for people with dietary restrictions or allergies.</p>"},{"location":"blog/cnow-what-to-know-before-you-go/#slow-shipping-to-aspen-and-limited-stores","title":"\ud83d\udce6 Slow shipping to Aspen and limited stores","text":"<p>Amazon shipping to Aspen is slow, and there aren't many stores in town. I went looking for a belt last year and had a tough time finding one. Don't expect one-day shipping on forgotten items, so come prepared!</p>"},{"location":"blog/cnow-what-to-know-before-you-go/#take-the-shuttle-service-into-town","title":"\ud83d\ude8e Take the shuttle service into town","text":"<p>There's a convenient shuttle that will take you into town and drops you off right in the heart of downtown Aspen. I definitely encourage you to explore the area\u2014I found a great little bakery that was delicious and even enjoyed some gelato!</p>"},{"location":"blog/cnow-what-to-know-before-you-go/#the-on-site-restaurant-is-quite-good","title":"\ud83c\udf72 The on-site restaurant is quite good","text":"<p>I ended up eating at the resort restaurant rather than going into town most of the time. While it's not the cheapest option, they offer nice variety and quality food. I saved some cost by bringing along some snacks for breakfast in my room.</p>"},{"location":"blog/cnow-what-to-know-before-you-go/#excellent-resort-accommodations","title":"\ud83d\udecf\ufe0f Excellent resort accommodations","text":"<p>The rooms at the resort are super comfortable and spacious. They featured microwaves, basic dishes, and coffee makers. Mine even had two rooms! It's probably too late to book at the resort for this year, but I highly recommend staying on-site if you can for future events.</p>"},{"location":"blog/cnow-what-to-know-before-you-go/#welcoming-conference-community","title":"\ud83d\udc65 Welcoming conference community","text":"<p>The C++Now attendees are incredibly welcoming if you want to join a group. I ended up getting \"adopted\" by a crew from Bloomberg last year, and it was a lot of fun. If you see people, don't just assume they're old friends who don't want to include anyone new. I initially felt uncomfortable approaching groups, but you should definitely go for it! The relationships and interactions are the best part of C++Now.</p>"},{"location":"blog/cnow-what-to-know-before-you-go/#weather-impacts-on-aspen-flights","title":"\u2708\ufe0f Weather impacts on Aspen flights","text":"<p>Flights in and out of Aspen can be significantly affected by weather conditions, so build in enough layover time if connecting through Denver. Avoid taking the last flight of the day if possible. We had snow on the ground when my plane was trying to land, and winds delayed my return flight. You really can't count on a short layover when traveling through Denver.</p>"},{"location":"blog/cnow-what-to-know-before-you-go/#presentation-slides-available-on-discord","title":"\ud83d\udcca Presentation slides available on Discord","text":"<p>Slides for the presentations are posted on Discord quite quickly, often even before the presentations begin. Many people take pictures of slides, but this isn't usually necessary. Instead, focus on the presentation and take notes. It can be valuable to jot down slide numbers for later reference, but you probably don't need to capture everything in the moment.</p>"},{"location":"blog/cnow-what-to-know-before-you-go/#supportive-audience-for-speakers","title":"\ud83c\udfa4 Supportive audience for speakers","text":"<p>If you're presenting at C++Now, remember that everyone wants you to succeed! The audience is there to learn and grow, not to challenge you or make you look bad. The C++ community at this conference is incredibly supportive and genuinely interested in what you have to share. Don't stress too much about your presentation\u2014just have fun with it and enjoy sharing your knowledge with fellow enthusiasts!</p> <p>Good luck to all the presenters, and I hope everyone has a wonderful time at this incredible event!</p>"},{"location":"blog/debugging-like-house---software-differential-diagnosis/","title":"Debugging Like House - Software Differential Diagnosis","text":"<p>At C++ now 2024, I had the pleasure of giving my first lightning talk. Although I presented this as a debugging technique for software, this really could be applied to solving any problem where you're having trouble coming up with a solution. </p> <p>Let me hear your thoughts in the comments below!</p>"},{"location":"blog/decision-making-isolation-dmi/","title":"Decision-Making Isolation (DMI)","text":"<p>Decision-Making Isolation is a design philosophy that emphasizes separating the decision-making in code from the IO (gathering inputs to the decisions and making outputs based on those decisions) and the wiring code (which connects the decision-making and IO). DMI emphasizes invariance as a key concept in choosing how to structure code and prioritizes free functions over classes. The goal is to achieve a high level of purity that makes code easy to read, modify, extend, and test.</p> <p>DMI was presented at C++Now 2024! The recording of that presentation is expected to be posted to YouTube in the summer of 2024.</p> <p>This blog is a work in progress, so please check back soon! In the meantime, check out my invariance blog in which I explore this key concept.</p>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/","title":"Using Gtest with CMake in Godbolt","text":""},{"location":"blog/using-gtest-with-cmake-in-godbolt/#tldr","title":"TL;DR","text":"<p>Learn how to set up Google Test (Gtest) with CMake in Compiler Explorer (Godbolt) for efficient C++ unit testing in a multi-file project environment. This approach streamlines the development process, especially for personal projects or when you need a quick, sharable testing setup.</p>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#introduction","title":"Introduction","text":"<p>Compiler Explorer (CE), also known as godbolt.org, has been a game-changer for many software engineers, myself included. Over the past four years, it has significantly impacted my development process. This tool's influence extends beyond individual developers; even tech giants like Google incorporate CE into their official processes. The C++ community (and many others) owes a debt of gratitude to Matt Godbolt for creating this invaluable resource.</p> <p>One of CE's most powerful applications is in learning how to perform Test Driven Development (TDD). Previously, setting up a TDD environment could take hours. With CE and some guidance from Niall Cooling's blog, I was able to start unit testing in under two minutes. This accessibility extends to various devices, from desktops to tablets, and even smartphones (though mobile usage has its limitations).</p> <p>While CE's Gtest integration works seamlessly for single-file projects, things get more complex when you need to separate source code and unit tests. This blog post will guide you through setting up Gtest with CMake in Compiler Explorer for multi-file projects, sharing insights from my experience and offering solutions to common challenges.</p>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#why-this-matters","title":"Why This Matters","text":"<p>As your projects grow, separating source code and unit tests becomes crucial for maintainability. This division becomes required if you're creating a library that you want to be usable by others. However, this separation often introduces complexity, especially when working with online tools like Compiler Explorer. By mautilizing  the setup of Gtest with CMake in CE, you can:</p> <ol> <li>Quickly prototype and test complex, multi-file C++ projects</li> <li>Share your work easily with colleagues or the community</li> <li>Maintain a clean, organized codebase even in an online environment</li> <li>Leverage the power of TDD without the overhead of local environment setup</li> </ol> <p>Let's dive into how we can achieve this and overcome some common hurdles along the way.</p>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#my-use-case","title":"My Use Case","text":""},{"location":"blog/using-gtest-with-cmake-in-godbolt/#the-birth-of-gtest_ct","title":"The Birth of gtest_ct","text":"<p>After attending an enlightening talk at C++Now 2024 by Braden Ganetsky on \"Unit testing an expression template library in C++20,\" I was inspired to create a tiny compile-time wrapper library for Gtest. I aptly named it gtest_ct. (Stay tuned for a dedicated blog post on this library once I finalize version 1.0!)</p>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#development-in-compiler-explorer","title":"Development in Compiler Explorer","text":"<p>Compiler Explorer (CE) proved invaluable during the initial development of gtest_ct:</p> <ol> <li>Rapid Prototyping: I quickly wrote and tested interesting code snippets.</li> <li>Immediate Feedback: The library's functionality was verified using Gtest itself.</li> <li>Iteration Speed: The development cycle was significantly faster than setting up a local environment.</li> </ol>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#the-single-file-limitation","title":"The Single-File Limitation","text":"<p>As the library grew, I hit a roadblock: with tests and source in the same file, I couldn't use gtest_ct outside of its own development. This limitation sparked my search for a multi-file solution in CE.</p>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#the-sudoku-solver-project","title":"The Sudoku Solver Project","text":"<p>The need for a multi-file setup became even more apparent when I started a professional development project to design and implement a sudoku solver. This project demanded:</p> <ol> <li>Modular Design: Breaking the code into different files, mirroring a real-world project structure.</li> <li>Separation of Concerns: Keeping source code and unit tests in separate files.</li> <li>Scalability: Allowing for easy addition of new components and tests.</li> </ol>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#the-cmake-solution","title":"The CMake Solution","text":"<p>While CE has supported multiple files using CMake for years, incorporating Gtest isn't straightforward due to the interworkings of CD and compilation time limits. This challenge led me to develop the solution I'm sharing in this blog post.</p> <p>In the following sections, we'll dive into how to set up Gtest with CMake in Compiler Explorer, overcoming these limitations and enabling more complex, real-world project structures.</p>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#setting-up-gtest-with-cmake-in-compiler-explorer","title":"Setting Up Gtest with CMake in Compiler Explorer","text":""},{"location":"blog/using-gtest-with-cmake-in-godbolt/#the-starter-example","title":"The Starter Example","text":"<p>To get you up and running quickly, I've prepared a starter example project. This example demonstrates the key components needed to use Gtest with CMake in Compiler Explorer. A big 'thank you' to RF and French Joe for figuring this out initially!</p>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#key-components-of-the-setup","title":"Key Components of the Setup","text":"<p>Let's break down the essential elements that make this setup work:</p> <ol> <li>Configuring CE to Include Gtest</li> <li>Select Gtest from the library drop-down menu in CE.</li> <li> <p>Be aware that multiple versions may be listed, which can create challenges (more on this in the \"Gotchas\" section).</p> </li> <li> <p>Including the Correct Libraries</p> </li> </ol> <pre><code>target_link_libraries(the_executable PRIVATE gtest gmock gtest_main)\n</code></pre> <ul> <li>Include <code>gtest</code>, <code>gmock</code>, and <code>gtest_main</code> to ensure full Gtest functionality.</li> <li> <p><code>gtest_main</code> eliminates the need for a boilerplate main() function.</p> </li> <li> <p>Setting the CMake Version</p> </li> </ul> <pre><code>cmake_minimum_required(VERSION 3.5)\n</code></pre> <ul> <li>The CMake version is a crucial configuration variable.</li> <li> <p>Version 3.5 works well in most cases, but you may need to adjust based on your specific needs or CE's current setup.</p> </li> <li> <p>Project Structure</p> </li> <li><code>CMakeLists.txt</code>: Main CMake configuration file</li> <li><code>source.cpp</code>: A source file</li> <li><code>test_source.cpp</code>: Test file (which can be named anything)</li> <li>Additional <code>.cpp</code> and <code>.h</code> files as needed</li> </ul> <p>This structure allows for a clear separation of concerns while remaining manageable within CE's interface.</p>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#example-cmakeliststxt","title":"Example CMakeLists.txt","text":"<p>Here's a basic <code>CMakeLists.txt</code> file that ties everything together:</p> <pre><code>cmake_minimum_required(VERSION 3.5)\n\nproject(MyProject)\n\nadd_executable(the_executable\n    source.cpp\n    test_source.cpp)\n\ntarget_link_libraries(the_executable PRIVATE gtest gmock gmock_main)\n</code></pre> <p>This configuration sets up a basic project with Gtest support, compiling both your main code and tests into a single executable.</p> <p>By following this setup, you'll have a solid foundation for using Gtest with CMake in Compiler Explorer, enabling more complex, multi-file projects.</p>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#the-biggest-gotcha-to-avoid","title":"The Biggest Gotcha to Avoid","text":"<p>While setting up Gtest with CMake in Compiler Explorer is generally straightforward, there's one major pitfall that can cause frustration: version incompatibilities.</p>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#understanding-the-issue","title":"Understanding the Issue","text":"<p>Among Compiler Explorer's greatest strengths lies is its support for numerous compilers and libraries. However, this variety can lead to compatibility issues:</p> <ol> <li>Pre-built Libraries: CE uses pre-built versions of libraries like Gtest, installed using Conan.</li> <li>Location of Libraries: These pre-built Gtest libraries are typically located at <code>/app/googletest/lib/libgtest_maind.a</code>. This library must be linked to the binary via CmakeLists.txt.</li> <li>Version Mismatches: Not every Gtest library revision is pre-built for every compiler version in CE.</li> </ol>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#symptoms-of-version-incompatibility","title":"Symptoms of Version Incompatibility","text":"<p>If you encounter build failures that seem unrelated to your code, it might be due to this version mismatch. Common symptoms include:</p> <ul> <li>Unexpected linker errors</li> <li>Missing symbol errors</li> <li>Compilation failures with cryptic messages</li> </ul>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#how-to-avoid-the-gotcha","title":"How to Avoid the Gotcha","text":"<p>To navigate around this issue, follow these steps:</p> <ol> <li>Try Different Compiler Versions:</li> <li>If your project fails to build, experiment with different versions of your chosen compiler.</li> <li> <p>Sometimes, switching to an older or newer compiler version can resolve the issue.</p> </li> <li> <p>Adjust CMake Version:</p> </li> <li>The CMake version is another 'adjustment knob' in the configuration.</li> <li> <p>Try different CMake versions to find one compatible with your chosen Gtest and compiler versions.</p> </li> <li> <p>Check Gtest Version:</p> </li> <li>In the CE interface, verify which version of Gtest is being used.</li> <li> <p>If possible, try different Gtest versions to find one that works with your setup.</p> </li> <li> <p>Check C++ Version:</p> </li> <li> <p>In the CE command line arguments textbox, enter the update the version (e.g. <code>-std=C++17</code>)</p> </li> <li> <p>Simplify and Iterate:</p> </li> <li>Start with a minimal working example and gradually add complexity.</li> <li>This approach helps isolate where compatibility issues might be occurring.</li> </ol>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#example-workflow","title":"Example Workflow","text":"<p>Here's a step-by-step process to troubleshoot version incompatibilities:</p> <ol> <li>Start with the latest compiler version and Gtest version.</li> <li>If that fails, try an older compiler version.</li> <li>If issues persist, adjust the CMake version.</li> <li>Still having problems? Try a different Gtest version or the C++ standard.</li> <li>Repeat this process until you find a working combination.</li> </ol> <p>Remember, the goal is to find a stable configuration that allows you to focus on your actual code and tests, rather than wrestling with setup issues.</p> <p>By being aware of this potential gotcha and knowing how to work around it, you'll save time and frustration in your Compiler Explorer projects.</p>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#limitations","title":"Limitations","text":"<p>While using Gtest with CMake in Compiler Explorer is powerful, it's important to be aware of its limitations:</p> <ol> <li>Compilation Time Limits:</li> <li>CE restricts compilation and runtime to ensure fair usage for all users.</li> <li> <p>As projects grow, you may hit these limits more frequently.</p> </li> <li> <p>Inconsistent Compilation Success:</p> </li> <li>Larger projects may compile intermittently, presumably due to server load variations.</li> <li> <p>This can make debugging challenging, as failures might not always be due to your code.</p> </li> <li> <p>Limited Testing Scope:</p> </li> <li>You may need to comment out some unit test files in <code>CMakeLists.txt</code> to stay within time limits.</li> <li>This can lead to unintentional breaking of commented-out tests.</li> </ol>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#workaround-strategy","title":"Workaround Strategy","text":"<p>To mitigate these limitations:</p> <ol> <li>Modular Testing: Focus on testing specific modules or features at a time.</li> <li>Regular Full Tests: Periodically uncomment all tests to ensure overall project health.</li> <li>Local Backups: Maintain a local copy of your project for more comprehensive testing.</li> </ol>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#putting-this-to-use","title":"Putting This to Use","text":"<p>With this setup, I'm now able to:</p> <ol> <li>Finish separating the gtest_ct library into separate files.</li> <li>Develop more complex projects like my sudoku solver with proper separation of concerns.</li> <li>Quickly prototype and test ideas without the overhead of local environment setup.</li> </ol>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#conclusion","title":"Conclusion","text":"<p>Using Gtest with CMake in Compiler Explorer opens up new possibilities for C++ development and testing:</p> <ol> <li>Rapid Prototyping: Quickly set up and test complex, multi-file C++ projects.</li> <li>Easy Sharing: Share your work effortlessly with colleagues or the community.</li> <li>Clean Codebase: Maintain an organized project structure, even in an online environment.</li> <li>TDD Power: Leverage Test-Driven Development without local setup overhead.</li> </ol> <p>While there are limitations, the benefits of this approach far outweigh the drawbacks for many use cases, especially for personal projects or when you need a quick, sharable testing setup.</p> <p>I encourage you to try this setup in your next project. Experiment, iterate, and see how it can enhance your development workflow. Remember, the key to mastering any tool is practice and persistence.</p> <p>Happy coding, and may your tests always fail and then pass!</p>"},{"location":"blog/using-gtest-with-cmake-in-godbolt/#further-reading","title":"Further Reading","text":"<ul> <li>Compiler Explorer Documentation</li> <li>Google Test Primer</li> <li>CMake Tutorial</li> <li>C++ Core Guidelines on Testing</li> </ul> <p>Feel free to reach out if you have any questions or want to share your experiences with this setup. Let's continue to push the boundaries of what's possible in online C++ development!</p>"},{"location":"blog/what-is-invariance/","title":"What is Invariance?","text":"<p>The term 'invariant' is one of the linchpins of Decision Making Isolation. It is used in the Cpp Core Guidelines as the reason to use a class versus struct. But what does it really mean?</p>"},{"location":"blog/what-is-invariance/#struct-vs-class","title":"Struct vs Class","text":"<p>Before we discuss invariance, let's take a look at what else the Cpp Core Guidelines say about the difference between a class and struct.</p> <ul> <li>C.8: Use <code>class</code> rather than <code>struct</code> if any member is non-public Reason: Readability. To make it clear that something is being hidden/abstracted. This is a useful convention.</li> </ul> <p>While <code>class</code> and <code>struct</code> are relatively equivalent in C++, the Guidelines set the convention that structs are intended to only contain public members. Because all public data members can be directly modified, I believe it can be inferred that structs also shouldn't have public member functions. In the forthcoming Decision Making Isolation (DMI) blog, we'll go more into the preference for free functions. For now, we'll assume that structs only have public data members and no functions.</p> <ul> <li>C.2: Use <code>class</code> if the class has an invariant; use <code>struct</code> if the data members can vary independently. Reason: Readability. Ease of comprehension. The use of class alerts the programmer to the need for an invariant. This is a useful convention.</li> </ul> <p>The Guidelines also state the guidance that a class should be used when the data has an invariant. This guidance seems relatively clear-cut for deciding which type of object to use. However, the concept of invariance isn't trivial!</p>"},{"location":"blog/what-is-invariance/#defining-invariance","title":"Defining Invariance","text":"<p>In C.2, the Guidelines define invariance as:</p> <p>An invariant is a logical condition for the members of an object that a constructor must establish for the public member functions to assume. After the invariant is established (typically by a constructor) every member function can be called for the object. An invariant can be stated informally (e.g., in a comment) or more formally using Expects.</p> <p>If all data members can vary independently of each other, no invariant is possible.</p> <p>I've read this explanation over and over, but it still never quite made sense in those terms. Let's reword and expand this definition of invariance:</p> <p> KEY POINT </p> <p>An invariant is a logical condition for the members of an object that can be expected to be true from the time the constructor exits to the time the destructor is called. These logical conditions fall into three categories.</p> <ul> <li>A relationship between at least two data members such that all members cannot vary independently.</li> <li>A guarantee that any function with access to a resource may be called at any time, i.e. implementing RAII.</li> <li>A property of a data member that must always be true.</li> </ul> <p>A key for me is remembering that an invariance is a logical condition.</p> <p>Let's break down each of these types.</p>"},{"location":"blog/what-is-invariance/#relationships-between-members","title":"Relationships Between Members","text":"<p>Here's a simple example.</p> <p>Consider a simple electrical circuit that is characterized by Ohm's Law:</p> <p>volts = current * resistance</p> <p>Ohm's law dictates that if you vary any one of the parameters, at least one other must also change. If the voltage increases, either the current or resistance must also increase. If the current decreases, either the resistance will increase or the voltage will decrease. They cannot be changed independently. If we were to code up an object that held these parameters, the parameters couldn't be public members. We'd need to enforce the invariance dictated by Ohm's Law, so then we'd choose to use a class instead of a struct.</p> <pre><code>class SimpleCiruit {\npublic:\n  void setResistanceFixedVoltage(Resistance resistance) {\n    m_resistance = resistance;\n    m_amperage = m_volts / m_resistance;\n  }\n  void setResistanceFixedCurrent(Resistance resistance) {\n    m_resistance = resistance;\n    m_volts = m_amperage * m_resistance;\n  }\n  void setVoltsFixedCurrent(Voltage volts) {\n    m_volts = volts;\n    m_resistance = m_volts / m_amperage;\n  }\n  // ...\nprivate:\n  Voltage m_volts;\n  Current m_amperage;\n  Resistance m_resistance;\n};\n</code></pre> <p>In our code, all the parameters are not necessarily linked in this way, and it's not necessarily the constructor that needs to enforce these relationships. For instance, consider this class:</p> <pre><code>class Light {\npublic:\n  void setBrightness(uint8_t brightness) {\n    if (m_isLightOn) {\n      m_brightness = brightness;\n    }\n  }\n  void flipLightStatus() { m_isLightOn = !m_isLightOn; }\n\nprivate:\n  bool m_isLightOn;\n  uint8_t m_brightness;\n};\n</code></pre> <p>The variable <code>m_isLightOn</code> on can change completely independently from <code>m_brightness</code>, but the reverse is not true. Therefore, these two pieces of data still have an invariance: the brightness will only be updated when the light is on.</p>"},{"location":"blog/what-is-invariance/#guaranteeing-lifetime-of-an-owned-resource-or-raii","title":"Guaranteeing Lifetime of an Owned Resource, or RAII","text":"<p>Resources such as files, sockets, or heap memory need to be managed so that the right steps are made to open/close, connect/close, or allocate/deallocate these assets. It can be dangerous to assume that a caller will properly implement the correct initialization/deinitialization, so the Resource Allocation is Initialization, or RAII, technique was devised to encapsulate the assets. When implementing RAII, the wrapping entity (object) guarantees that any function that can access the underlying resource can be called from the end of the object's constructor until the object's destructor is called.</p> <p>This guarantee is our second form of invariance.</p> <p>cppreference.com defines Resource Allocation Is Initialization as:</p> <p>Resource Acquisition Is Initialization, or RAII, is a C++ programming technique that binds the life cycle of a resource that must be acquired before use (allocated heap memory, thread of execution, open socket, open file, locked mutex, disk space, database connection\u2014anything that exists in limited supply) to the lifetime of an object.</p> <p>RAII guarantees that the resource is available to any function that may access the object (resource availability is a class invariant, eliminating redundant runtime tests). It also guarantees that all resources are released when the lifetime of their controlling object ends, in reverse order of acquisition.</p> <p>Since the goal of RAII is to insulate the resource from direct manipulation, this necessitates that we use a class instead of a struct based on our previous discussion.</p> <p>There are plenty of resources discussing RAII, but here is classic example of wrapping a file handle:</p> <pre><code>class FileHandler {\npublic:\n    FileHandler(const char* filename) {\n        //throws an exception on failure\n        m_file.open(filename);\n    }\n\n    ~FileHandler() {\n        m_file.close();\n    }\n\n    std::string readLine() {\n        return m_file.readLine();\n    }\n\nprivate:\n    File m_file;\n};\n</code></pre> <p>On a side note, I really prefer the term CADRe, or Constructor Acquires-Destructor Releases, as a better name for remembering RAII. It is just easier to remember the meaning. However, it's hard to change a term that might have been around longer than the Super Nintendo (or at least older than the Nintendo 64, depending on your source).</p>"},{"location":"blog/what-is-invariance/#property-of-a-data-member-that-must-be-true","title":"Property of a Data Member that Must Be True","text":"<p>The final type of invariance is similar to the first but isn't a relationship between data members. Instead, some condition of a data member exists that must be enforced unrelated to another data member. Maybe our integer needs to always be even. Perhaps a string can only be a certain length. One of the most common places this is seen is in nontrivial getters or setters for an object that performs some enforcement.</p> <p>Consider this example:</p> <pre><code>class EvenNumber {\npublic:\n  EvenNumber(int i) { setNumber(i); }\n  void setNumber(int i) {\n    if ((i % 2) != 0) { \n      throw std::runtime_error(\"Invalid input\");\n    } else {\n      m_i = i;\n    }\n  }\n\nprivate:\n  int m_i;\n};\n</code></pre> <p>Here, the invariance is a condition between a member and the constant 2. </p> <p>The most common case of this type of invariance is comparisons to a constant or literal, like in this example. However, a similar case occurs when the invariance is a mathematical calculation that must be applied to a member. For instance, the class below stores an angle in radians but must convert the value to be in the range -2\u03c0 to 2\u03c0. This is more involved than simply comparing to a constant, but it's a similar logical assertion that necessitates using a class.</p> <pre><code>class UnitCircleAngle {\npublic:\n    void setAngleFromDegrees(float degrees) {\n        auto boundedAngleDegrees{std::fmodf(degrees, 360)};\n        m_angle = boundedAngleDegrees * M_PI / 180;\n    }\nprivate:\n    float m_angle;\n}\n</code></pre>"},{"location":"blog/what-is-invariance/#invariant-doesnt-mean-immutability","title":"'Invariant' Doesn't Mean Immutability","text":"<p>Remember that invariance means a logical condition that must always be true, not that the data cannot change. The term in software for something that cannot change is immutability.</p>"},{"location":"blog/what-is-invariance/#so-why-do-invariants-matter","title":"So Why Do Invariants Matter?","text":"<p>DMI uses invariance as one of the key heuristics when determining if a class, a struct, or a free function should be implemented based on C.2 from the Guidelines. In that blog, I discuss more about applying invariance in the Decision Making Isolation philosophy.</p>"},{"location":"blog/what-is-invariance/#complete-cpp-core-guideline-on-invariance","title":"Complete Cpp Core Guideline on Invariance","text":"<p>With these simple examples in mind, here is what the Guidelines say about when to use a class in C.2:</p>"},{"location":"blog/what-is-invariance/#c2-use-class-if-the-class-has-an-invariant-use-struct-if-the-data-members-can-vary-independently","title":"C.2: Use <code>class</code> if the class has an invariant; use <code>struct</code> if the data members can vary independently","text":""},{"location":"blog/what-is-invariance/#reason","title":"Reason","text":"<p>Readability. Ease of comprehension. The use of <code>class</code> alerts the programmer to the need for an invariant. This is a useful convention.</p>"},{"location":"blog/what-is-invariance/#note","title":"Note","text":"<p>An invariant is a logical condition for the members of an object that a constructor must establish for the public member functions to assume. After the invariant is established (typically by a constructor) every member function can be called for the object. An invariant can be stated informally (e.g., in a comment) or more formally using <code>Expects</code>.</p> <p>If all data members can vary independently of each other, no invariant is possible.</p>"},{"location":"blog/what-is-invariance/#example","title":"Example","text":"<pre><code>    struct Pair {  // the members can vary independently\n        string name;\n        int volume;\n    };\n</code></pre> <p>but:</p> <pre><code>    class Date {\n    public:\n        // validate that {yy, mm, dd} is a valid date and initialize\n        Date(int yy, Month mm, char dd);\n        // ...\n    private:\n        int y;\n        Month m;\n        char d;    // day\n    };\n</code></pre>"},{"location":"blog/what-is-invariance/#note_1","title":"Note","text":"<p>If a class has any <code>private</code> data, a user cannot completely initialize an object without the use of a constructor. Hence, the class definer will provide a constructor and must specify its meaning. This effectively means the definer needs to define an invariant.</p> <p>See also:</p> <ul> <li>define a class with private data as <code>class</code></li> <li>Prefer to place the interface first in a class</li> <li>minimize exposure of members</li> <li>Avoid <code>protected</code> data</li> </ul>"},{"location":"blog/what-is-invariance/#enforcement","title":"Enforcement","text":"<p>Look for <code>struct</code>s with all data private and <code>class</code>es with public members.</p>"},{"location":"blog/what-is-invariance/#but-what-about-when-my-invariants-or-data-change","title":"But what about when my invariants or data change?","text":"<p>One potential critique of this guidance for choosing a struct versus a class is that public member functions provide an interface that isolates the private data members from the users of that object. If I have a class with a getter, I can change the type of that private data without modifying calls to the getter as long as the return type remains the same. If a struct is used and the data members are manipulated directly, any change to the types of those data members impacts the struct's users. Additionally, if a struct is used and we need to introduce an invariance (which would necessitate private data and therefore a switch from a struct to a class), then we'll also have to modify all the users. Using a class is less likely to cause the callers of its member functions to change.</p> <p>I agree that this is definitely a tradeoff. I think a couple of things can serve to minimize the impact of these scenarios. First, DMI gives guidance that keeps the scope of data small, meaning that the scope of updates when objects change will also be small. Second, changing from setting a variable directly to calling a getter or setter when a new invariance is introduced is a minor refactor. Third, the placement of data is often just a best guess at first, so the location, type, etc. of data is likely to change over time anyway. The setter/getter interface is also fluid early in development. Modern IDEs significantly simplify these types of refactors, and the introduction of AI will only continue this trend.</p>"},{"location":"blog/what-is-invariance/#conclusion","title":"Conclusion","text":"<p>Invariance is an important concept that can serve as guidance in designing and implementing code. It's integral to Decision Making Isolation, so be on the lookout for that future blog to learn more about how invariance is applied in DMI to fulfill the Single Responsibility and Open-Closed Principles!</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/blog/","title":"Blog","text":""}]}